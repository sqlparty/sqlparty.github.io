---
layout: post
status: publish
published: true
title: Python中DataBase API v2.0详解
excerpt_separator: <!--more-->
wordpress_id: 857
wordpress_url: http://www.sqlparty.com/?p=857
date: '2015-05-11 01:01:52 +0800'
date_gmt: '2015-05-10 17:01:52 +0800'
categories:
- 未分类
tags: []
---
<p>工作中使用Python来操作MySQL、Oracle，对其API不甚了解，趁使用的机会，来看下Python中如何设计DataBase API。</p>
<p>本文针对的是v 2.0版本的协议规范。参考：<a href="https://www.python.org/dev/peps/pep-0249/">PEP 0249 -- Python Database API Specification v2.0</a>。</p>
<p>Python 对DB API的约定，是为了规范化对DB的操作，这样如果迁移到不同的数据库管理系统，能减少DB操作代码的修改。以下详细解释下各个API的作用，以及在MySQL下的实现、使用。MySQL API使用MySQLdb模块来测试。</p>
<p><!--more--></p>
<h2>1.全局变量</h2></p>
<ul>
<li>apilevel 字符串常量，表明支持的API版本。</li>
<li>threadsafety 整型常量，表明线程间安全性的支持程度。能共享意味着不同线程访问该资源时无需再明确互斥。
<ul>
<li>0 模块不能共享</li>
<li>1 模块能共享，Connection不能共享</li>
<li>2 模块、Connection能共享，cursor不能共享</li>
<li>3 模块、Connection、Cursor都能共享</li><br />
</ul><br />
</li></p>
<li>paramstyle &nbsp;字符串常量，表明参数格式化的风格。
<ul>
<li>qmark &nbsp;如where name=?</li>
<li>numeric 如where name=:1</li>
<li>named &nbsp;如 where name=:name</li>
<li>format 如where name=%s ，同ANSI C printf格式化代码。</li>
<li>pyformat 如 where name=%(name)s</li><br />
</ul><br />
</li><br />
</ul><br />
MySQLdb实现中，如下：</p>
<blockquote><p>>>> import MySQLdb<br />
>>> MySQLdb.apilevel<br />
'2.0'<br />
>>> MySQLdb.threadsafety<br />
1<br />
>>> MySQLdb.paramstyle<br />
'format'</blockquote><br />
所以我们可知，MySQLdb使用时，Connection不能多线程共享，prepare时，使用%s等来标记占位符。</p>
<h2>2.Connection</h2><br />
connect(...) &nbsp;创建一个连接Connection对象，具体参数依赖于不同DB实现。<br />
实现上可以使用关键字参数，如:<br />
my_conn=connect(dsn='myhost:MYDB', user='guido', password='234$')</p>
<p>Connection类基本方法如下：</p>
<ul>
<li>.close() &nbsp; 关闭连接。连接关闭后，任何企图通过这个连接发起操作就抛出一个异常，包括那些使用此连接的Cursor。 &nbsp; 注：没有commit就执行close()，会导致隐式地回滚！</li>
<li>.commit() &nbsp;事务提交。如果DB支持自动提交，则必须初始化关闭。可以提供接口来开启自动提交！</li>
<li>.rollback() &nbsp;回滚当前事务。</li>
<li>.cursor() &nbsp; &nbsp;返回一个使用该Connection的新的Cursor对象。如果DB不支持明确的Cursor概念，具体实现模块需要虚拟出Cursor的概念。具体Cursor对象相关，见下文。</li><br />
</ul></p>
<h2>3.Cursor</h2><br />
Cursor用来管理一个fetch操作的上下文。</p>
<ul>
<li>一个Connection对象创建出来的Cursor不是隔离的！一个Cursor做出的变化对同Connection下的其他Cursor可见。</li>
<li>不同Connection对象创建出来的Cursor可以隔离，也可以不隔离。</li><br />
</ul><br />
属性：</p>
<ul>
<li>.description 只读属性。如果cursor没有结果或者没有调用execute*()方法，则返回None。否则返回一个sequence，其中每一项代表一个返回列的熟悉：
<ul>
<li>name</li>
<li>type_code 取值是Type类型</li>
<li>display_size</li>
<li>internal_size</li>
<li>precision</li>
<li>scale</li>
<li>null_ok</li><br />
</ul><br />
</li></p>
<li>.rowcount &nbsp;只读属性。返回上一个execute*()方法处理的记录数。如select返回记录数，update/insert/delete受影响记录数。如果没有执行过execute*()或者没法获取明确记录数，则返回-1。</li><br />
</ul><br />
常用方法：</p>
<ul>
<li>.callproc(procname[,parameters]) &nbsp;调用存储过程</li>
<li>.close() 关闭cursor。之后再通过此cursor进行操作，则抛异常。</li>
<li>.execute(operation[,parameters]) &nbsp;prepare和执行一个db操作。参数的传入方式使用模块全局定义的paramstyle。执行完，cursor会始终保留这个结果集相关的引用。提升执行效率的方法是：多次调用，相同的operation，不同的parameters。不关注返回值。</li>
<li>.executemany(operation,seq_of_parameters) &nbsp; 例如，一次插入多行。</li>
<li>.fetchone() &nbsp;返回下一条记录或者None（没有更多记录）。如果之前没有execute*()或者干脆没有结果集返回，则抛异常。</li>
<li>.fetchmany(<span style="color: #444444;">[&nbsp;</span><em style="color: #444444;">size=cursor.arraysize&nbsp;</em><span style="color: #444444;">]</span>) &nbsp; 一次指定返回多条记录。默认使用arraysize配置（默认为1）。</li>
<li>.fetchall() &nbsp;一下返回所有结果集。适用于结果集不大的场景。</li>
<li>.nextset() &nbsp; 如果DB支持，可以返回多个结果集。会忽略当前结果集中剩余的记录。</li><br />
</ul></p>
<h2>4.异常</h2><br />
具体API模块必须能够抛如下异常（或者其之类对象），来使得错误信息能够被捕捉。<br />
StandardError<br />
|__Warning<br />
|__Error<br />
|__InterfaceError<br />
|__DatabaseError<br />
|__DataError<br />
|__OperationalError<br />
|__IntegrityError<br />
|__InternalError<br />
|__ProgrammingError<br />
|__NotSupportedError</p>
<h2>5.MySQLdb</h2><br />
针对上面这些类和约定，MySQLdb的实现如何？也有一些特殊的地方需要注意。示例如下。</p>
<p>1）简单任务</p>
<p>[python]<br />
#!/usr/bin/env python<br />
# -*- coding: utf-8 -*-</p>
<p>conn=MySQLdb.connect(host="127.0.0.1",port=3306,user="hengxin",passwd="hengxin",db="test",connect_timeout=5)<br />
cur=conn.cursor()<br />
affect_rows=cur.executemany("insert into t1(name) values(%s)",[("name1"),("name2"),("中文名3")])<br />
print("affect_rows:%d"%(affect_rows))<br />
cur.arraysize=5<br />
cur.execute("select id,name from t1")<br />
rs=cur.fetchall()<br />
for r in rs:<br />
 print(rs[1])<br />
conn.commit()<br />
cur.close()<br />
conn.close()<br />
[/python]</p>
<p>这段代码需要明确指出的是：</pre></p>
<ul>
<li>字符集未指定，默认采用latin1，输入中文会有乱码</li>
<li>默认MySQLdb会关闭自动提交，所以需要显式提交conn.commit()</li>
<li>没有异常捕获机制。</li>
<li>fetchall是预估数据量不大的情况下使用，会全部缓存在客户端。如果数据量巨大，考虑放到server端缓存。</li><br />
</ul></p>
<pre>
2）大数据量下读<br />
[python]<br />
#!/usr/bin/env python<br />
# -*- coding: utf-8 -*-</p>
<p>def main():<br />
 try:<br />
 import MySQLdb<br />
 except ImportError:<br />
 print("Import MySQLdb error")<br />
 exit(1)</p>
<p> try:<br />
 conn=MySQLdb.connect(host="10.210.184.173",port=3306,user="hengxin",passwd="hengxin",db="test",connect_timeout=5,charset="utf8")<br />
 cur=conn.cursor(MySQLdb.cursors.SSCursor)<br />
 affect_rows=cur.executemany("insert into t1(name) values(%s)",[("name1"),("name2"),("中文名3")])<br />
 print("affect_rows:%d"%(affect_rows))<br />
 cur.arraysize=5<br />
 cur.execute("select id,name from t1")<br />
 rs=cur.fetchmany()<br />
 while len(rs)!=0:<br />
 #todo handle the record<br />
 for r in rs:<br />
 print(r[1])<br />
 rs=cur.fetchmany()<br />
 conn.commit()<br />
 cur.close()<br />
 conn.close()<br />
 except MySQLdb.MySQLError, e:<br />
 print("MySQL-Error[%d] %s"%(e.args[0],e.args[1]))<br />
 return None</p>
<p>if __name__ == "__main__":<br />
 main()<br />
[/python]</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>参考：</p>
<p>http://sourceforge.net/p/mysql-python/mysqldb-2/ci/default/tree/doc/MySQLdb.txt</p>
